Form-based dialog are designed to host a form and form components. Those dialogs are typically used to provide inputs (which are eventually validated) of model object properties.
The model could be a simple String or Integer but can also be a more complex bean.<br/>
<br/>
Extending an <code>AbstractFormDialog</code> is almost like extending an AbstractDialog (see 'Custom dialog' above)<br/>
What you need in addition is to specify what button act as the submit button, and what form is being in use (the dialog's inner form).<br/>
The usage is the same as <code>InputDialog</code> above.
<pre>
public <b>abstract</b> class MyFormDialog extends AbstractFormDialog&lt;MyBean&gt;
{
	private Form&lt;?&gt; form;
	
	/* ... */

	@Override
	protected DialogButton getSubmitButton()
	{
		//should return one of the button returned by #getButtons()
		return this.findButton(OK);
	}

	@Override
	public Form&lt;?&gt; getForm()
	{
		return this.form;
	}

	@Override
	public void onError(AjaxRequestTarget target)
	{
		target.add(this.form.get("feedback")); //suppose you have a feedback panel
	}
}
</pre>

<h4>Warning with nested forms!</h4>
Although Wicket allows nested forms, it is recommended to not nest a form-dialog within another form to avoid experiencing some troubles.
Troubles could be like the dialogs does not close under certain circumstances (you re-attached the parent form for instance), the dialog's model could be set to null when the parent form is submitted and/or the parent form cannot be submitted due to some validators in the nested form (the dialog's one)...<br/>
