<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="Contact">

    <select id="getContact" parameterClass="long" resultClass="wicket.contrib.phonebook.Contact">
		SELECT id, firstname, lastname, email, phone FROM CONTACT WHERE ID = #value#
    </select>

    <!-- Use Contact object (JavaBean) properties as parameters for update. Each of the
        parameters in the #hash# symbols is a JavaBeans property. -->
    <update id="updateContact" parameterClass="wicket.contrib.phonebook.Contact">
        UPDATE CONTACT
            SET
                FIRSTNAME = #firstname#,
                LASTNAME = #lastname#,
                EMAIL = #email#,
                PHONE = #phone#
            WHERE ID = #id#
    </update>

    <!-- Use primitive properties as parameter for delete. -->
    <delete id="deleteContact" parameterClass="long">
        DELETE FROM CONTACT WHERE ID = #value#
    </delete>


    <!-- Use Person object (JavaBean) properties as parameters for insert. Each of the
        parameters in the #hash# symbols is a JavaBeans property. -->
    <insert id="insertContact" parameterClass="wicket.contrib.phonebook.Contact">
        INSERT INTO
            CONTACT (FIRSTNAME, LASTNAME, EMAIL, PHONE)
        VALUES (#firstname#, #lastname#, #email#, #phone#)
        <selectKey keyProperty="id" resultClass="long" >
            CALL IDENTITY()
        </selectKey>
    </insert>

    <select id="getContactList" parameterClass="map" resultClass="wicket.contrib.phonebook.Contact">
		SELECT id, firstname, lastname, email, phone FROM CONTACT
        <dynamic prepend="WHERE">
            <isNotNull prepend="AND" property="firstname">
                UPPER(firstname) LIKE #firstname#
            </isNotNull>
            <isNotNull prepend="AND" property="lastname">
                lastname = #lastname#
            </isNotNull>
            <isNotNull prepend="AND" property="email">
                UPPER(email) LIKE #email#
            </isNotNull>
            <isNotNull prepend="AND" property="phone">
                UPPER(phone) LIKE #phone#
            </isNotNull>
        </dynamic>
        ORDER BY $sort$ $sortasc$
    </select>

    <select id="getContactCount" resultClass="int">
        SELECT COUNT(LASTNAME) FROM CONTACT
        <dynamic prepend="WHERE">
            <isNotNull prepend="AND" property="firstname">
                UPPER(FIRSTNAME) LIKE #firstname#
            </isNotNull>
            <isNotNull prepend="AND" property="lastname">
                LASTNAME = #lastname#
            </isNotNull>
            <isNotNull prepend="AND" property="email">
                UPPER(EMAIL) LIKE #email#
            </isNotNull>
            <isNotNull prepend="AND" property="phone">
                UPPER(PHONE) LIKE #phone#
            </isNotNull>
        </dynamic>
    </select>

    <select id="getUniqueLastNames" resultClass="java.lang.String">
        SELECT DISTINCT LASTNAME FROM CONTACT ORDER BY LASTNAME
    </select>

    <statement id="createTable">
        CREATE TABLE contact (
            ID integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
            FIRSTNAME varchar(32) NOT NULL,
            LASTNAME varchar(32) NOT NULL,
            EMAIL varchar(160),
            PHONE varchar(16) NOT NULL
        )
    </statement>

</sqlMap>